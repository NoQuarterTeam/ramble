generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
}

enum Role {
  GUIDE
  OWNER
  MEMBER
}

model User {
  id             String  @id @default(uuid())
  email          String  @unique
  password       String
  firstName      String
  lastName       String
  username       String  @unique
  role           Role    @default(MEMBER)
  avatar         String?
  avatarBlurHash String?
  bio            String? @db.LongText
  instagram      String?
  isVerified     Boolean @default(false)
  isAdmin        Boolean @default(false)

  // Preferences
  isPetOwner      Boolean @default(false)
  isClimber       Boolean @default(false)
  isHiker         Boolean @default(false)
  isMountainBiker Boolean @default(false)
  isPaddleBoarder Boolean @default(false)
  isSurfer        Boolean @default(false)

  // Relations
  followers     User[]      @relation("UserFollows")
  following     User[]      @relation("UserFollows")
  createdSpots  Spot[]      @relation(name: "Creator")
  ownedSpots    Spot[]      @relation(name: "Owner")
  verifiedSpots Spot[]      @relation(name: "Verifier")
  spotImages    SpotImage[]
  lists         List[]
  reviews       Review[]
  van           Van?
  feedback      Feedback[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([username])
}

model Van {
  id          String  @id @default(uuid())
  name        String
  model       String
  year        Int
  description String? @db.LongText

  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String     @unique
  images VanImage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
}

model VanImage {
  id       String  @id @default(uuid())
  path     String
  blurHash String?

  vanId String
  van   Van    @relation(fields: [vanId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([vanId, path])
  @@index([vanId])
}

enum SpotType {
  // Stays
  CAMPING
  FREE_CAMPING
  PARKING
  // Activities
  CLIMBING
  SURFING
  MOUNTAIN_BIKING
  HIKING // deprecated
  HIKING_TRAIL
  PADDLE_BOARDING // deprecated
  PADDLE_KAYAK
  // Services
  GAS_STATION
  ELECTRIC_CHARGE_POINT
  MECHANIC_PARTS
  VET
  // Hospitality
  CAFE
  RESTAURANT
  BAR
  SHOP
  // Other
  VOLUNTEERING
  ART_FILM_PHOTOGRAPHY
  NATURE_EDUCATION
  FESTIVAL
}

model Spot {
  id          String    @id @default(uuid())
  name        String
  type        SpotType
  description String?   @db.LongText
  address     String?
  latitude    Float
  longitude   Float
  publishedAt DateTime?
  verifiedAt  DateTime?

  // Options 
  isPetFriendly Boolean @default(true)

  // Relations
  amenities  SpotAmenities?
  images     SpotImage[]
  verifierId String?
  verifier   User?          @relation(name: "Verifier", fields: [verifierId], references: [id])
  creatorId  String
  creator    User           @relation(name: "Creator", fields: [creatorId], references: [id])
  listSpots  ListSpot[]
  ownerId    String?
  owner      User?          @relation(name: "Owner", fields: [ownerId], references: [id])
  reviews    Review[]

  sourceUrl String? @db.VarChar(500)

  // Campspace
  campspaceId  Int?    @unique
  campspaceUrl String? @db.VarChar(500)

  // Neste
  nesteId String? @unique

  // park4night
  park4nightId Int? @unique

  // komoot
  komootId String? @unique

  // surfline    
  surflineId String? @unique

  // natuurKampeerterreinen
  natuurKampeerterreinenId String? @unique

  // cucortu
  cucortuId String? @unique

  // loodusegakoos
  loodusegakoosId String? @unique

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  @@index([createdAt])
  @@index([type])
  @@index([type, longitude])
  @@index([latitude])
  @@index([longitude])
  @@index([ownerId])
  @@index([verifierId])
  @@index([creatorId])
  @@index([campspaceId])
  @@index([park4nightId])
  @@index([komootId])
  @@index([surflineId])
}

model SpotAmenities {
  id          String  @id @default(uuid())
  hotWater    Boolean
  wifi        Boolean
  shower      Boolean
  toilet      Boolean
  kitchen     Boolean
  electricity Boolean
  water       Boolean
  firePit     Boolean
  sauna       Boolean
  pool        Boolean
  bbq         Boolean

  spot   Spot   @relation(fields: [spotId], references: [id], onDelete: Cascade)
  spotId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model SpotImage {
  id       String  @id @default(uuid())
  path     String
  blurHash String?

  spotId    String
  spot      Spot   @relation(fields: [spotId], references: [id], onDelete: Cascade)
  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([spotId, path])
  @@index([spotId])
  @@index([creatorId])
}

model List {
  id          String  @id @default(uuid())
  name        String
  description String? @db.LongText
  isPrivate   Boolean @default(false)

  listSpots ListSpot[]
  creatorId String
  creator   User       @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([creatorId])
}

model ListSpot {
  id     String @id @default(uuid())
  listId String
  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)
  spotId String
  spot   Spot   @relation(fields: [spotId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([spotId])
  @@index([listId])
}

model Review {
  id          String @id @default(uuid())
  rating      Int
  description String @db.LongText

  spotId String
  spot   Spot   @relation(fields: [spotId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([spotId])
  @@index([userId])
}

model AccessRequest {
  id    String @id @default(uuid())
  email String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum FeedbackType {
  ISSUE
  IDEA
  OTHER
}

model Feedback {
  id      String       @id @default(uuid())
  type    FeedbackType
  message String       @db.LongText

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
}
