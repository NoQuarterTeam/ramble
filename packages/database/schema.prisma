generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
}

enum Role {
  ADMIN
  AMBASSADOR
  USER
}

model User {
  id        String  @id @default(uuid())
  email     String  @unique
  password  String
  firstName String
  lastName  String
  role      Role    @default(USER)
  avatar    String?

  // Profile
  isPetOwner      Boolean @default(false)
  isClimber       Boolean @default(false)
  isHiker         Boolean @default(false)
  isMountainBiker Boolean @default(false)
  isPaddleBoarder Boolean @default(false)
  bio             String? @db.LongText

  // Relations
  createdSpots  Spot[]
  verifiedSpots Spot[]      @relation(name: "VerifiedSpot")
  spotImages    SpotImage[]
  lists         List[]
  reviews       Review[]
  van           Van?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Van {
  id          String  @id @default(uuid())
  name        String
  model       String
  year        Int
  description String? @db.LongText
  user        User    @relation(fields: [userId], references: [id])
  userId      String  @unique

  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  images    VanImage[]

  @@index([userId])
}

model VanImage {
  id   String @id @default(uuid())
  path String

  vanId String
  van   Van    @relation(fields: [vanId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([vanId])
}

enum SpotType {
  CAFE
  CAMPING
  RESTAURANT
  PARKING
  BAR
  TIP
  SHOP
  CLIMBING
  MOUNTAIN_BIKING
  GAS_STATION
  PADDLE_BOARDING
  OTHER
}

model Spot {
  id            String      @id @default(uuid())
  name          String
  type          SpotType
  description   String      @db.LongText
  address       String
  latitude      Float
  longitude     Float
  isPetFriendly Boolean     @default(true)
  images        SpotImage[]
  verifiedAt    DateTime?
  verifierId    String?
  verifier      User?       @relation(name: "VerifiedSpot", fields: [verifierId], references: [id])
  creatorId     String
  creator       User        @relation(fields: [creatorId], references: [id])
  spotLists     ListSpot[]
  reviews       Review[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt

  @@index([verifierId])
  @@index([latitude])
  @@index([longitude])
  @@index([creatorId])
}

model SpotImage {
  id        String   @id @default(uuid())
  path      String
  spotId    String
  spot      Spot     @relation(fields: [spotId], references: [id])
  creatorId String
  creator   User     @relation(fields: [creatorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([spotId])
  @@index([creatorId])
}

model List {
  id        String     @id @default(uuid())
  name      String
  listSpots ListSpot[]
  creatorId String
  creator   User       @relation(fields: [creatorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([creatorId])
}

model ListSpot {
  id     String @id @default(uuid())
  listId String
  list   List   @relation(fields: [listId], references: [id])
  spotId String
  spot   Spot   @relation(fields: [spotId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([spotId])
  @@index([listId])
}

model Review {
  id          String @id @default(uuid())
  spotId      String
  spot        Spot   @relation(fields: [spotId], references: [id])
  userId      String
  user        User   @relation(fields: [userId], references: [id])
  rating      Int
  description String @db.LongText

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([spotId, userId])
  @@index([spotId])
  @@index([userId])
}
