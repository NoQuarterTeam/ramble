generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "mysql"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
}

enum Role {
  GUIDE
  OWNER
  MEMBER
}

model User {
  id                     String  @id @default(uuid())
  email                  String  @unique
  password               String
  firstName              String
  lastName               String
  username               String  @unique
  role                   Role    @default(MEMBER)
  avatar                 String?
  avatarBlurHash         String?
  bio                    String? @db.Text
  instagram              String?
  isVerified             Boolean @default(false)
  isAdmin                Boolean @default(false)
  isPendingGuideApproval Boolean @default(false)
  latitude               Float?
  longitude              Float?

  // Spot preferences
  isPetOwner      Boolean @default(false)
  isClimber       Boolean @default(false)
  isHiker         Boolean @default(false)
  isMountainBiker Boolean @default(false)
  isPaddleBoarder Boolean @default(false)
  isSurfer        Boolean @default(false)

  // Settings
  isLocationPrivate Boolean @default(false)
  preferredLanguage String  @default("en")
  tripSyncEnabled   Boolean @default(true)

  // Relations
  followers             User[]         @relation("UserFollows")
  following             User[]         @relation("UserFollows")
  createdSpots          Spot[]         @relation(name: "Creator")
  ownedSpots            Spot[]         @relation(name: "Owner")
  verifiedSpots         Spot[]         @relation(name: "Verifier")
  spotImages            SpotImage[]
  lists                 List[]
  reviews               Review[]
  trips                 Trip[]         @relation(name: "UserTrips")
  createdTrips          Trip[]         @relation(name: "CreatedTrips")
  tripItems             TripItem[]
  tripMedias            TripMedia[]
  van                   Van?
  feedback              Feedback[]
  myInviteCodes         InviteCode[]   @relation(name: "MyInviteCodes")
  usedInviteCode        InviteCode?    @relation(fields: [usedInviteCodeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  usedInviteCodeId      String?        @unique
  createdSpotRevisions  SpotRevision[] @relation(name: "Creator")
  approvedSpotRevisions SpotRevision[] @relation(name: "Approver")
  accessRequest         AccessRequest?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([latitude])
}

model InviteCode {
  id         String    @id @default(uuid())
  code       String    @unique
  acceptedAt DateTime?
  owner      User      @relation(name: "MyInviteCodes", fields: [ownerId], references: [id])
  ownerId    String
  user       User?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([ownerId])
}

model Van {
  id          String  @id @default(uuid())
  name        String
  model       String
  year        Int
  description String? @db.Text

  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String     @unique
  images VanImage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model VanImage {
  id       String  @id @default(uuid())
  path     String
  blurHash String?

  vanId String
  van   Van    @relation(fields: [vanId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([vanId, path])
}

enum SpotType {
  // Stays
  CAMPING
  FREE_CAMPING
  PARKING
  // Activities
  CLIMBING
  SURFING
  MOUNTAIN_BIKING
  HIKING_TRAIL
  PADDLE_KAYAK
  // Services
  GAS_STATION
  ELECTRIC_CHARGE_POINT
  MECHANIC_PARTS
  VET
  // Hospitality
  CAFE
  RESTAURANT
  BAR
  SHOP
  // Other
  VOLUNTEERING
  ART_FILM_PHOTOGRAPHY
  NATURE_EDUCATION
  FESTIVAL
  REWILDING
}

model Spot {
  id          String    @id @default(uuid())
  name        String
  type        SpotType
  description String?   @db.Text
  address     String?
  latitude    Float
  longitude   Float
  publishedAt DateTime?
  verifiedAt  DateTime?

  pointLocation Unsupported("POINT GENERATED ALWAYS AS (ST_GeomFromText(CONCAT('POINT(',longitude,' ',latitude,')'))) STORED")?

  // Options 
  isPetFriendly Boolean @default(true)

  // Relations
  amenities     SpotAmenities?
  images        SpotImage[]
  verifierId    String?
  verifier      User?          @relation(name: "Verifier", fields: [verifierId], references: [id])
  creatorId     String
  creator       User           @relation(name: "Creator", fields: [creatorId], references: [id])
  listSpots     ListSpot[]
  ownerId       String?
  owner         User?          @relation(name: "Owner", fields: [ownerId], references: [id])
  reviews       Review[]
  spotRevisions SpotRevision[]
  tripItems     TripItem[]
  cover         SpotImage?     @relation(fields: [coverId], references: [id], name: "SpotCover", onDelete: NoAction, onUpdate: NoAction)
  coverId       String?        @unique

  deletedAt DateTime?
  closedAt  DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  sourceUrl                String? @db.VarChar(500)
  campspaceId              Int?    @unique
  nesteId                  String? @unique
  park4nightId             Int?    @unique
  komootId                 String? @unique
  surflineId               String? @unique
  natuurKampeerterreinenId String? @unique
  cucortuId                String? @unique
  loodusegakoosId          String? @unique
  roadsurferId             String? @unique
  hipcampId                String? @unique
  theCragId                String? @unique
  norcampId                String? @unique
  mossyEarthId             String? @unique
  rewildingEuropeId        String? @unique
  polskiCaravaningId       String? @unique
  googlePlaceId            String? @unique

  @@index([publishedAt])
  @@index([ownerId])
  @@index([verifierId])
  @@index([creatorId])
  @@index([longitude])
  @@index([verifiedAt, type, deletedAt, creatorId, publishedAt])
  @@index([type, verifiedAt, latitude, longitude, deletedAt, creatorId, publishedAt])
  @@index([deletedAt])
}

model SpotAmenities {
  id          String  @id @default(uuid())
  hotWater    Boolean @default(false)
  wifi        Boolean @default(false)
  shower      Boolean @default(false)
  toilet      Boolean @default(false)
  kitchen     Boolean @default(false)
  electricity Boolean @default(false)
  water       Boolean @default(false)
  firePit     Boolean @default(false)
  sauna       Boolean @default(false)
  pool        Boolean @default(false)
  bbq         Boolean @default(false)

  spot   Spot   @relation(fields: [spotId], references: [id], onDelete: Cascade)
  spotId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model SpotImage {
  id       String  @id @default(uuid())
  path     String  @db.VarChar(500)
  blurHash String?

  spotId    String
  spot      Spot   @relation(fields: [spotId], references: [id], onDelete: Cascade)
  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id])
  coverSpot Spot?  @relation(name: "SpotCover")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([spotId, path])
  @@index([creatorId])
}

model SpotRevision {
  id         String    @id @default(uuid())
  notes      Json?
  spotId     String
  spot       Spot      @relation(fields: [spotId], references: [id], onDelete: Cascade)
  creatorId  String
  creator    User      @relation(name: "Creator", fields: [creatorId], references: [id])
  approvedAt DateTime?
  approverId String?
  approver   User?     @relation(name: "Approver", fields: [approverId], references: [id])

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  @@index([spotId])
  @@index([creatorId])
  @@index([approverId])
}

model List {
  id          String  @id @default(uuid())
  name        String
  description String? @db.Text
  isPrivate   Boolean @default(false)

  listSpots ListSpot[]
  creatorId String
  creator   User       @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([creatorId])
}

model ListSpot {
  id     String @id @default(uuid())
  listId String
  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)
  spotId String
  spot   Spot   @relation(fields: [spotId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([spotId])
  @@index([listId])
}

model Review {
  id          String  @id @default(uuid())
  rating      Int
  description String  @db.Text
  language    String?

  spotId String
  spot   Spot   @relation(fields: [spotId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([rating, spotId])
  @@index([spotId])
  @@index([userId])
}

model AccessRequest {
  id         String    @id @default(uuid())
  email      String
  acceptedAt DateTime?
  code       String    @unique

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum FeedbackType {
  ISSUE
  IDEA
  OTHER
}

model Feedback {
  id      String       @id @default(uuid())
  type    FeedbackType
  message String       @db.Text

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
}

model Trip {
  id        String   @id @default(uuid())
  name      String
  startDate DateTime @db.Date
  endDate   DateTime @db.Date
  creator   User     @relation(name: "CreatedTrips", fields: [creatorId], references: [id])
  creatorId String

  users User[]      @relation(name: "UserTrips")
  items TripItem[]
  media TripMedia[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([creatorId])
}

enum MediaType {
  IMAGE
  VIDEO
}

model TripMedia {
  id            String     @id @default(uuid())
  path          String
  latitude      Float?
  longitude     Float?
  note          String?    @db.Text
  type          MediaType? @default(IMAGE)
  duration      Int?
  thumbnailPath String?
  assetId       String     @unique()
  timestamp     DateTime

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String
  trip      Trip   @relation(fields: [tripId], references: [id])
  tripId    String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  @@index([tripId])
  @@index([latitude])
  @@index([longitude])
  @@index([creatorId])
  @@index([deletedAt])
}

model TripItem {
  id    String    @id @default(uuid())
  date  DateTime? @db.Date
  order Float     @default(0)

  creator   User      @relation(fields: [creatorId], references: [id])
  creatorId String
  trip      Trip      @relation(fields: [tripId], references: [id])
  tripId    String
  spot      Spot?     @relation(fields: [spotId], references: [id])
  spotId    String?
  stop      TripStop?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([creatorId])
  @@index([tripId])
  @@index([spotId])
}

model TripStop {
  id        String  @id @default(uuid())
  name      String
  image     String? @db.VarChar(500)
  latitude  Float
  longitude Float

  tripItem   TripItem @relation(fields: [tripItemId], references: [id])
  tripItemId String   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
