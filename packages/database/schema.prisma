generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
}

enum Role {
  GUIDE
  OWNER
  MEMBER
}

model User {
  id             String  @id @default(uuid())
  email          String  @unique
  password       String
  firstName      String
  lastName       String
  username       String  @unique
  role           Role    @default(MEMBER)
  avatar         String?
  avatarBlurHash String?
  bio            String? @db.LongText
  instagram      String?
  isVerified     Boolean @default(false)
  isAdmin        Boolean @default(false)

  // Preferences
  isPetOwner      Boolean @default(false)
  isClimber       Boolean @default(false)
  isHiker         Boolean @default(false)
  isMountainBiker Boolean @default(false)
  isPaddleBoarder Boolean @default(false)
  isSurfer        Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Relations
  followers        User[]       @relation("UserFollows")
  following        User[]       @relation("UserFollows")
  createdSpots     Spot[]       @relation(name: "Creator")
  ownedSpots       Spot[]       @relation(name: "Owner")
  verifiedSpots    Spot[]       @relation(name: "Verifier")
  spotImages       SpotImage[]
  lists            List[]
  reviews          Review[]
  van              Van?
  myInviteCodes    InviteCode[] @relation(name: "MyInviteCodes")
  usedInviteCode   InviteCode?  @relation(fields: [usedInviteCodeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  usedInviteCodeId String?      @unique

  @@index([username])
}

model InviteCode {
  id         String    @id @default(uuid())
  code       String    @unique
  acceptedAt DateTime?
  owner      User      @relation(name: "MyInviteCodes", fields: [ownerId], references: [id])
  ownerId    String
  user       User?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([code])
  @@index([ownerId])
}

model Van {
  id          String  @id @default(uuid())
  name        String
  model       String
  year        Int
  description String? @db.LongText
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String  @unique

  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  images    VanImage[]

  @@index([userId])
}

model VanImage {
  id       String  @id @default(uuid())
  path     String
  blurHash String?

  vanId String
  van   Van    @relation(fields: [vanId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([vanId, path])
  @@index([vanId])
}

enum SpotType {
  CAFE
  CAMPING
  FREE_CAMPING
  RESTAURANT
  PARKING
  BAR
  TIP
  SHOP
  CLIMBING
  SURFING
  MOUNTAIN_BIKING
  HIKING
  PADDLE_BOARDING
  GAS_STATION
  OTHER
}

model Spot {
  id          String   @id @default(uuid())
  name        String
  type        SpotType
  description String?  @db.LongText
  address     String
  latitude    Float
  longitude   Float

  // Options 
  isPetFriendly Boolean @default(true)

  // Relations
  amenities  SpotAmenities?
  images     SpotImage[]
  verifiedAt DateTime?
  verifierId String?
  verifier   User?          @relation(name: "Verifier", fields: [verifierId], references: [id])
  creatorId  String
  creator    User           @relation(name: "Creator", fields: [creatorId], references: [id])
  listSpots  ListSpot[]
  ownerId    String?
  owner      User?          @relation(name: "Owner", fields: [ownerId], references: [id])
  reviews    Review[]
  deletedAt  DateTime?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @default(now()) @updatedAt

  // Campspace
  campspaceId  Int?    @unique
  campspaceUrl String? @db.VarChar(500)

  // Neste
  nesteId String? @unique

  // park4night
  park4nightId Int? @unique

  @@index([createdAt])
  @@index([latitude])
  @@index([longitude])
  @@index([ownerId])
  @@index([verifierId])
  @@index([creatorId])
  @@index([campspaceId])
}

model SpotAmenities {
  id          String  @id @default(uuid())
  hotWater    Boolean
  wifi        Boolean
  shower      Boolean
  toilet      Boolean
  kitchen     Boolean
  electricity Boolean
  water       Boolean
  firePit     Boolean
  sauna       Boolean
  pool        Boolean
  bbq         Boolean

  spot   Spot   @relation(fields: [spotId], references: [id], onDelete: Cascade)
  spotId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model SpotImage {
  id        String   @id @default(uuid())
  path      String
  blurHash  String?
  spotId    String
  spot      Spot     @relation(fields: [spotId], references: [id], onDelete: Cascade)
  creatorId String
  creator   User     @relation(fields: [creatorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([spotId, path])
  @@index([spotId])
  @@index([creatorId])
}

model List {
  id          String     @id @default(uuid())
  name        String
  description String?    @db.LongText
  listSpots   ListSpot[]
  creatorId   String
  creator     User       @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([creatorId])
}

model ListSpot {
  id     String @id @default(uuid())
  listId String
  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)
  spotId String
  spot   Spot   @relation(fields: [spotId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([spotId])
  @@index([listId])
}

model Review {
  id          String @id @default(uuid())
  spotId      String
  spot        Spot   @relation(fields: [spotId], references: [id], onDelete: Cascade)
  userId      String
  user        User   @relation(fields: [userId], references: [id])
  rating      Int
  description String @db.LongText

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([spotId])
  @@index([userId])
}
